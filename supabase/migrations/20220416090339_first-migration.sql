-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

-- Type: game_result

-- DROP TYPE IF EXISTS public.game_result;

CREATE TYPE public.game_result AS ENUM
    ('UNSETTLLED', 'LOSE', 'WIN');

ALTER TYPE public.game_result
    OWNER TO postgres;

-- Type: game_type

-- DROP TYPE IF EXISTS public.game_type;

CREATE TYPE public.game_type AS ENUM
    ('PHOTO_WEREWOLF');

ALTER TYPE public.game_type
    OWNER TO postgres;

-- Type: room_status

-- DROP TYPE IF EXISTS public.room_status;

CREATE TYPE public.room_status AS ENUM
    ('STANDBY', 'GAME', 'VOTE', 'FINISHED');

ALTER TYPE public.room_status
    OWNER TO postgres;

-- Type: user_type

-- DROP TYPE IF EXISTS public.user_type;

CREATE TYPE public.user_type AS ENUM
    ('AUTH', 'GUEST');

ALTER TYPE public.user_type
    OWNER TO postgres;

CREATE TABLE IF NOT EXISTS public.users
(
    user_id character varying COLLATE pg_catalog."default" NOT NULL,
    user_type user_type NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT (now() AT TIME ZONE 'utc'::text),
    CONSTRAINT users_pkey PRIMARY KEY (user_id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.users
    OWNER to postgres;

ALTER TABLE IF EXISTS public.users
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.users TO anon;

GRANT ALL ON TABLE public.users TO authenticated;

GRANT ALL ON TABLE public.users TO postgres;

GRANT ALL ON TABLE public.users TO service_role;

CREATE TABLE IF NOT EXISTS public.auth_users
(
    user_id character varying COLLATE pg_catalog."default" NOT NULL,
    name character varying COLLATE pg_catalog."default",
    image_url character varying COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT auth_users_pkey PRIMARY KEY (user_id),
    CONSTRAINT auth_users_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES public.users (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.auth_users
    OWNER to postgres;

ALTER TABLE IF EXISTS public.auth_users
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.auth_users TO anon;

GRANT ALL ON TABLE public.auth_users TO authenticated;

GRANT ALL ON TABLE public.auth_users TO postgres;

GRANT ALL ON TABLE public.auth_users TO service_role;

CREATE TABLE IF NOT EXISTS public.rooms
(
    room_id character varying COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT (now() AT TIME ZONE 'utc'::text),
    game_type game_type NOT NULL DEFAULT 'PHOTO_WEREWOLF'::game_type,
    room_status room_status NOT NULL DEFAULT 'STANDBY'::room_status,
    finished_at timestamp with time zone,
    name character varying COLLATE pg_catalog."default",
    CONSTRAINT rooms_pkey PRIMARY KEY (room_id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.rooms
    OWNER to postgres;

ALTER TABLE IF EXISTS public.rooms
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.rooms TO anon;

GRANT ALL ON TABLE public.rooms TO authenticated;

GRANT ALL ON TABLE public.rooms TO postgres;

GRANT ALL ON TABLE public.rooms TO service_role;

CREATE TABLE IF NOT EXISTS public.room_users
(
    room_id character varying COLLATE pg_catalog."default",
    user_id character varying COLLATE pg_catalog."default", 
    game_result game_result NOT NULL DEFAULT 'UNSETTLLED'::game_result,
    created_at timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text),
    CONSTRAINT room_users_pkey PRIMARY KEY (room_id, user_id),
    CONSTRAINT room_users_room_id_fkey FOREIGN KEY (room_id)
        REFERENCES public.rooms (room_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT room_users_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES public.users (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.room_users
    OWNER to postgres;

ALTER TABLE IF EXISTS public.room_users
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.room_users TO anon;

GRANT ALL ON TABLE public.room_users TO authenticated;

GRANT ALL ON TABLE public.room_users TO postgres;

GRANT ALL ON TABLE public.room_users TO service_role;

CREATE TABLE IF NOT EXISTS public.guest_users
(
    user_id character varying COLLATE pg_catalog."default" NOT NULL,
    name character varying COLLATE pg_catalog."default" NOT NULL,
    guest_id character varying COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text),
    CONSTRAINT guest_users_pkey PRIMARY KEY (user_id),
    CONSTRAINT guest_users_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES public.users (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.guest_users
    OWNER to postgres;

ALTER TABLE IF EXISTS public.guest_users
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.guest_users TO anon;

GRANT ALL ON TABLE public.guest_users TO authenticated;

GRANT ALL ON TABLE public.guest_users TO postgres;

GRANT ALL ON TABLE public.guest_users TO service_role;
